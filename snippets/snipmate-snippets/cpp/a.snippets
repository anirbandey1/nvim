
# Cp1
snippet cp1 "Competitive Programming Snippet"
	#include <bits/stdc++.h>
	using namespace std;
	
	/* clang-format off */
	
	#define endl "\n"
	
	typedef long long int li;
	typedef long double ld;
	typedef pair<int,int> pi;
	
	
	mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
	
	void _print(int t) {cerr << t;}
	void _print(long long int t) {cerr << t;}
	void _print(string t) {cerr << t;}
	void _print(char t) {cerr << t;}
	void _print(long double t) {cerr << t;}
	void _print(double t) {cerr << t;}
	
	template <class T, class V> void _print(pair <T, V> p);
	template <class T> void _print(vector <T> v);
	template <class T> void _print(set <T> v);
	template <class T> void _print(unordered_set <T> v);
	template <class T> void _print(multiset <T> v);
	template <class T, class V> void _print(map <T, V> v);
	template <class T, class V> void _print(unordered_map <T, V> v);
	template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.first); cerr << ","; _print(p.second); cerr << "}";}
	template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
	template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
	template <class T> void _print(unordered_set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
	template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
	template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
	template <class T, class V> void _print(unordered_map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
	
	
	
	/* clang-format on */
	
	$0
	
	
	int32_t main(int32_t argc, char *argv[])
	{
	    ios_base::sync_with_stdio(false);
	    cin.tie(NULL);
	    cout.tie(NULL);
	    cerr.tie(NULL);
	
	#ifndef ONLINE_JUDGE
	    freopen("input.txt", "r", stdin);
	    freopen("output.txt", "w", stdout);
	    freopen("error.txt", "w", stderr);
	#endif
	
	    auto start1 = chrono::high_resolution_clock::now();
	
	    int testcases = 1;
	    cin >> testcases;
	
	    for(int tt = 1 ; tt <= testcases ; tt++)
	    {
	        
	    }
	
	    auto stop1 = chrono::high_resolution_clock::now();
	    auto duration = chrono::duration_cast<chrono::microseconds>(stop1 - start1);
	    cerr << endl << "Time : " << duration.count() / 1000 << "." << duration.count()%1000 << endl;
	
	    return 0;
	}
	
	
snippet snipiored "IO redirection to input.txt, output.txt, error.txt"
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cerr.tie(NULL);
	
	#ifndef ONLINE_JUDGE
	    freopen("input.txt", "r", stdin);
	    freopen("output.txt", "w", stdout);
	    freopen("error.txt", "w", stderr);
	#endif
	
snippet zzmod1 "Modular Arithmetic"
	li modpos(li a, li m) { return (a % m + m) % m; }
	li modadd(li a, li b, li m) { return ((a % m + 0ll + b % m) % m + m) % m; }
	li modmul(li a, li b, li m) { return (a % m * 1ll * b % m) % m; }
	li modpow(li a, li b, li m) {
	    li res = 1ll;
	    while (b > 0) {
	        if (b & 1) {
	            res = modmul(res, a, m);
	            b ^= 1;
	        } else {
	            a = modmul(a, a, m);
	            b >>= 1;
	        }
	    }
	    return res;
	}
	li modinv(li a, li m) { return modpow(a, m - 2, m); }
	li moddiv(li a, li b, li m) { return modmul(a, modinv(b, m), m); }
	

snippet zzmod2 "Modular Arithmetic with default MOD"
	li const MOD = 1e9 + 7;
	li modpos(li a) { return modpos(a, MOD); }
	li modadd(li a, li b) { return modadd(a, b, MOD); }
	li modmul(li a, li b) { return modmul(a, b, MOD); }
	li modpow(li a, li b) { return modpow(a, b, MOD); }
	li modinv(li a) { return modinv(a, MOD); }
	li moddiv(li a, li b) { return moddiv(a, b, MOD); }
	

