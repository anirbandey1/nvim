{
	"Binary Tree": {
		"prefix": "sniptree",
		"body": [
			"struct TreeNode{",
			"    int val,ht;",
			"    TreeNode *left,*right;",
			"",
			"    TreeNode(int data){",
			"        val=data;",
			"        ht=1;",
			"        left=NULL;",
			"        right=NULL;",
			"    }",
			"",
			"};",
			"",
			"namespace my{",
			"    int height(TreeNode *node){",
			"        if(node==NULL)return 0;",
			"",
			"        int lh,rh;",
			"        lh=height(node->left);",
			"        rh=height(node->right);",
			"        return 1 + max(lh,rh);",
			"    }",
			"",
			"    vector<vector<string>>printTree(TreeNode *root){",
			"",
			"        int m,n;",
			"        // m is number of columns",
			"        // n is number of rows",
			"        int rootHt = height(root);",
			"        m = rootHt;",
			"        n = (1 << rootHt)-1;",
			"        vector<vector<string>>res(m,vector<string>(n));",
			"",
			"",
			"        queue<pair<TreeNode*,pair<int,int>>>q;",
			"        q.push({root,  { 0, (n-1)/2 }  });",
			"",
			"        while(!q.empty())",
			"        {",
			"            int sz=q.size();",
			"            for(int i=0;i<sz;i++)",
			"            {",
			"                auto it=q.front();",
			"                q.pop();",
			"                TreeNode *cur=it.first;",
			"                int row= it.second.first;",
			"                int col= it.second.second;",
			"",
			"                int exp,jump;",
			"                if(cur->left || cur->right){",
			"                    exp = rootHt-row-2;",
			"                    jump = (1<<exp);",
			"                }",
			"",
			"                if(cur->left){",
			"                    q.push({cur->left,  { row+1, col-jump }  });",
			"                }",
			"                if(cur->right){",
			"                    q.push({cur->right, { row+1, col+jump }  });",
			"                }",
			"",
			"                res[row][col]= to_string(cur->val);",
			"            }",
			"        }",
			"        return res;",
			"    }",
			"}"
		],
		"description": "Binary Tree"
	},
	"Display contents of vector": {
		"prefix": "snipdisp",
		"body": [
			"namespace my{",
			"\ttemplate<class  T>",
			"\tvoid display(const vector<T> &vec,string separator = \" \"){",
			"",
			"\t\tfor(int i=0;i<vec.size();i++)",
			"\t\t{",
			"\t\t\tcout << vec[i] << separator;",
			"\t\t}",
			"\t\tcout<<endl;",
			"\t}",
			"",
			"\ttemplate<class  T>",
			"\tvoid display(const vector<pair<T,T>> &vec,string separator = \" \"){",
			"",
			"\t\tfor(int i=0;i<vec.size();i++)",
			"\t\t{",
			"\t\t\tcout <<\"(\"<<vec[i].first<<\",\"<<vec[i].second<<\")\"<< separator;",
			"\t\t}",
			"\t\tcout<<endl;",
			"\t}",
			"",
			"\ttemplate<class  T>",
			"\tvoid display(const vector<vector<T>> &vec,string separator = \" \"){",
			"",
			"\t\tfor(int i=0;i<vec.size();i++)",
			"\t\t{",
			"\t\t\tfor(int j=0;j<vec[i].size();j++)",
			"\t\t\t{",
			"\t\t\t\tcout << vec[i][j] << separator;",
			"\t\t\t}",
			"\t\t\tcout<<endl;",
			"\t\t}",
			"\t\tcout<<endl;",
			"\t}",
			"}"
		],
		"description": "Display contents of vector"
	}
}
