{
  "Matrix": {
  "prefix": "snipmatrix",
  "body": [
    "namespace matrix {",
    "template<typename T=long long>",
    "vector<vector<T>> multiply(vector<vector<T>> &a, vector<vector<T>> &b){",
    "    // rectangular(not square matrices allowed)",
    "",
    "    int p ,q,r,s;",
    "    p = a.size(); q = a[0].size(), r = b.size(), s = b[0].size();",
    "",
    "    if(q!=r){",
    "        cout << \"Error : Columns of the first matrix must be equal to the Rows of the second matrix\" << endl;",
    "    }",
    "",
    "    vector<vector<T>> c(p,vector<T>(s,0));",
    "",
    "    for(int i=0;i<p;i++){",
    "        for(int j=0;j<s;j++){",
    "            for(int k=0;k<q;k++){",
    "                c[i][j] += a[i][k]*b[k][j];",
    "            }",
    "        }",
    "    }",
    "",
    "    return c;",
    "}",
    "",
    "template <typename T=long long>",
    "vector<vector<T>> getUnitMatrix (int n){",
    "    // standard unit matrix",
    "    if (n<1) {",
    "        cout << \"Error : Size of matrix must be atleast 1 \" << endl;",
    "    }",
    "    vector<vector<T>> unitMatrix (n,vector<T>(n,0));",
    "    for(int i=0;i<n;i++){",
    "        unitMatrix[i][i]=1;",
    "    }",
    "",
    "    return unitMatrix;",
    "}",
    "",
    "template<typename T=long long>",
    "vector<vector<T>> pow(vector<vector<T>>&a, int b){",
    "    // Must be a square matrix",
    "    if(a.size()!=a[0].size()){",
    "        cout << \"Error : Not a square matrix\" << endl;",
    "    }",
    "",
    "    int n = a.size();",
    "    if(b==0){",
    "        return getUnitMatrix<T>(n);",
    "    }",
    "",
    "    vector<vector<T>> temp = matrix::pow(a,b/2);",
    "    temp = multiply(temp , temp );",
    "",
    "    if (b&1){",
    "        temp = multiply(temp , a );",
    "    }",
    "",
    "    return temp;",
    "",
    "}",
    "",
    "}",
    ""
  ],
  "description": ""
}

}
